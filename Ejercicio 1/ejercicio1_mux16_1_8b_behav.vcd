$date
	Wed Sep 22 00:31:00 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mux16_1_8b_behav_tb $end
$var wire 8 ! Y [7:0] $end
$var reg 8 " X_0 [7:0] $end
$var reg 8 # X_1 [7:0] $end
$var reg 8 $ X_10 [7:0] $end
$var reg 8 % X_11 [7:0] $end
$var reg 8 & X_12 [7:0] $end
$var reg 8 ' X_13 [7:0] $end
$var reg 8 ( X_14 [7:0] $end
$var reg 8 ) X_15 [7:0] $end
$var reg 8 * X_2 [7:0] $end
$var reg 8 + X_3 [7:0] $end
$var reg 8 , X_4 [7:0] $end
$var reg 8 - X_5 [7:0] $end
$var reg 8 . X_6 [7:0] $end
$var reg 8 / X_7 [7:0] $end
$var reg 8 0 X_8 [7:0] $end
$var reg 8 1 X_9 [7:0] $end
$var reg 1 2 sel0 $end
$var reg 1 3 sel1 $end
$var reg 1 4 sel2 $end
$var reg 1 5 sel3 $end
$scope module mux16_1Prueba $end
$var wire 8 6 in0 [7:0] $end
$var wire 8 7 in1 [7:0] $end
$var wire 8 8 in10 [7:0] $end
$var wire 8 9 in11 [7:0] $end
$var wire 8 : in12 [7:0] $end
$var wire 8 ; in13 [7:0] $end
$var wire 8 < in14 [7:0] $end
$var wire 8 = in15 [7:0] $end
$var wire 8 > in2 [7:0] $end
$var wire 8 ? in3 [7:0] $end
$var wire 8 @ in4 [7:0] $end
$var wire 8 A in5 [7:0] $end
$var wire 8 B in6 [7:0] $end
$var wire 8 C in7 [7:0] $end
$var wire 8 D in8 [7:0] $end
$var wire 8 E in9 [7:0] $end
$var wire 1 2 sel0 $end
$var wire 1 3 sel1 $end
$var wire 1 4 sel2 $end
$var wire 1 5 sel3 $end
$var wire 8 F out [7:0] $end
$scope module eva1_01 $end
$var wire 1 3 sel $end
$var wire 8 G out [7:0] $end
$var wire 8 H in1 [7:0] $end
$var wire 8 I in0 [7:0] $end
$upscope $end
$scope module eva1_23 $end
$var wire 1 3 sel $end
$var wire 8 J out [7:0] $end
$var wire 8 K in1 [7:0] $end
$var wire 8 L in0 [7:0] $end
$upscope $end
$scope module eva1_45 $end
$var wire 1 3 sel $end
$var wire 8 M out [7:0] $end
$var wire 8 N in1 [7:0] $end
$var wire 8 O in0 [7:0] $end
$upscope $end
$scope module eva1_67 $end
$var wire 1 3 sel $end
$var wire 8 P out [7:0] $end
$var wire 8 Q in1 [7:0] $end
$var wire 8 R in0 [7:0] $end
$upscope $end
$scope module eva2_01 $end
$var wire 8 S in0 [7:0] $end
$var wire 8 T in1 [7:0] $end
$var wire 1 4 sel $end
$var wire 8 U out [7:0] $end
$upscope $end
$scope module eva2_23 $end
$var wire 8 V in0 [7:0] $end
$var wire 8 W in1 [7:0] $end
$var wire 1 4 sel $end
$var wire 8 X out [7:0] $end
$upscope $end
$scope module eva_final $end
$var wire 8 Y in0 [7:0] $end
$var wire 8 Z in1 [7:0] $end
$var wire 1 5 sel $end
$var wire 8 [ out [7:0] $end
$upscope $end
$scope module mux01 $end
$var wire 8 \ in0 [7:0] $end
$var wire 8 ] in1 [7:0] $end
$var wire 1 2 sel $end
$var wire 8 ^ out [7:0] $end
$upscope $end
$scope module mux1011 $end
$var wire 8 _ in0 [7:0] $end
$var wire 8 ` in1 [7:0] $end
$var wire 1 2 sel $end
$var wire 8 a out [7:0] $end
$upscope $end
$scope module mux1213 $end
$var wire 8 b in0 [7:0] $end
$var wire 8 c in1 [7:0] $end
$var wire 1 2 sel $end
$var wire 8 d out [7:0] $end
$upscope $end
$scope module mux1415 $end
$var wire 8 e in0 [7:0] $end
$var wire 8 f in1 [7:0] $end
$var wire 1 2 sel $end
$var wire 8 g out [7:0] $end
$upscope $end
$scope module mux23 $end
$var wire 8 h in0 [7:0] $end
$var wire 8 i in1 [7:0] $end
$var wire 1 2 sel $end
$var wire 8 j out [7:0] $end
$upscope $end
$scope module mux45 $end
$var wire 8 k in0 [7:0] $end
$var wire 8 l in1 [7:0] $end
$var wire 1 2 sel $end
$var wire 8 m out [7:0] $end
$upscope $end
$scope module mux67 $end
$var wire 8 n in0 [7:0] $end
$var wire 8 o in1 [7:0] $end
$var wire 1 2 sel $end
$var wire 8 p out [7:0] $end
$upscope $end
$scope module mux89 $end
$var wire 8 q in0 [7:0] $end
$var wire 8 r in1 [7:0] $end
$var wire 1 2 sel $end
$var wire 8 s out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1100010 s
b1100010 r
b1100001 q
b11 p
b11 o
b10 n
b11111100 m
b11111100 l
b11111101 k
b11111110 j
b11111110 i
b11111111 h
b11110000 g
b11110000 f
b10010011 e
b10010010 d
b10010010 c
b10010001 b
b10010000 a
b10010000 `
b1100011 _
b1 ^
b1 ]
b0 \
b11110000 [
b11110000 Z
b11 Y
b11110000 X
b11110000 W
b10010000 V
b11 U
b11 T
b11111110 S
b10010010 R
b11110000 Q
b11110000 P
b1100010 O
b10010000 N
b10010000 M
b11111100 L
b11 K
b11 J
b1 I
b11111110 H
b11111110 G
b11110000 F
b1100010 E
b1100001 D
b11 C
b10 B
b11111100 A
b11111101 @
b11111110 ?
b11111111 >
b11110000 =
b10010011 <
b10010010 ;
b10010001 :
b10010000 9
b1100011 8
b1 7
b0 6
15
14
13
12
b1100010 1
b1100001 0
b11 /
b10 .
b11111100 -
b11111101 ,
b11111110 +
b11111111 *
b11110000 )
b10010011 (
b10010010 '
b10010001 &
b10010000 %
b1100011 $
b1 #
b0 "
b11110000 !
$end
#2
b10010010 !
b10010010 F
b10010010 [
b11111100 U
b11111100 Y
b10010010 X
b10010010 Z
b1 G
b1 S
b11111100 J
b11111100 T
b1100010 M
b1100010 V
b10010010 P
b10010010 W
03
#3
